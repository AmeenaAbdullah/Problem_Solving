#include<bits/stdc++.h>
using namespace std;

vector<int> array_queries (int N, int M, vector<int> A, vector<int> B, int Q, vector<vector<int> > queries) {
   
   vector<int> sum;
   for(int q=0 ; q < Q+1 ; q++)
   {
      int t_sum=0;
      int i=0;
      while(i<A.size())
       {
         for(int j=0 ; j<B.size(); j++)
         {
            
             t_sum+=((A[i] * B[j]) * (i+j+2));
          
           }
         i++;
       }
    if(q!=Q){
       
       if(queries[q][0]==1){
       
                    swap(A[queries[q][1]-1],B[queries[q][2]-1]);

       }
       else if(queries[q][0]==2){
           swap(A[queries[q][1]-1],A[queries[q][2]-1]);

       }
       else if(queries[q][0]=3){
         swap(B[queries[q][1]-1],B[queries[q][2]-1]);
       
       }
     }
    sum.push_back(t_sum);
   }
     return sum;
}

int main() {

    ios::sync_with_stdio(0);
    cin.tie(0);
    int T;
    cin >> T;
    for(int t_i = 0; t_i < T; t_i++)
    {
        int N;
        cin >> N;
        int M;
        cin >> M;
        vector<int> A(N);
        for(int i_A = 0; i_A < N; i_A++)
        {
        	cin >> A[i_A];
        }
        vector<int> B(M);
        for(int i_B = 0; i_B < M; i_B++)
        {
        	cin >> B[i_B];
        }
        int Q;
        cin >> Q;
        vector<vector<int> > queries(Q, vector<int>(3));
        for (int i_queries = 0; i_queries < Q; i_queries++)
        {
        	for(int j_queries = 0; j_queries < 3; j_queries++)
        	{
        		cin >> queries[i_queries][j_queries];
        	}
        }
        
        vector<int> out_(Q+1);
        out_ = array_queries(N, M, A, B, Q, queries);
       cout << out_[0];
        for(int i_out_ = 1; i_out_ < out_.size(); i_out_++)
        {
        	cout << " " << out_[i_out_];
        }
        cout << "\n";
    }
}
